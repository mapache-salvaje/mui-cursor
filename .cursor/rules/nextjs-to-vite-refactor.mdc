---
description: Rule for refactoring Next.js applications to Vite applications
globs: ["*"]
alwaysApply: true
---

# Next.js to Vite Refactoring Process

Rule for systematically refactoring Next.js applications to Vite applications.

<rule>
name: nextjs-to-vite-refactor
description: Comprehensive process for refactoring Next.js applications to Vite applications
filters:
  - type: event
    pattern: "file_modify|file_create"
  - type: file_extension
    pattern: "\\.(ts|tsx|js|jsx|json)$"

actions:
  - type: suggest
    message: |
      When refactoring a Next.js application to Vite:

      1. Project Setup:
         ```bash
         # Create new Vite project
         npm create vite@latest cursor-mui-vite-[template-name] -- --template react-ts
         cd cursor-mui-vite-[template-name]
         
         # Install dependencies
         npm install @emotion/react @emotion/styled @mui/icons-material @mui/material @mui/lab
         npm install -D @types/node @types/react @types/react-dom @typescript-eslint/eslint-plugin @typescript-eslint/parser @vitejs/plugin-react eslint eslint-plugin-react-hooks eslint-plugin-react-refresh typescript
         ```

      2. Directory Structure:
         ```
         src/
         ├── components/     # Template components
         ├── shared-theme/   # Shared theme components
         ├── App.tsx         # Main app component
         ├── main.tsx        # Entry point
         └── index.css       # Global styles
         ```

      3. File Extensions:
         - Change `.js` to `.jsx` for files containing JSX
         - Change `.ts` to `.tsx` for TypeScript files with JSX
         - Keep `.js` for pure JavaScript files
         - Keep `.ts` for pure TypeScript files

      4. Import Paths:
         - Update relative paths to use `./` instead of `../`
         - Update shared theme imports to use `./shared-theme/`
         - Use `@` alias for imports from src directory

      5. Component Changes:
         ```tsx
         // Remove Next.js specific imports
         // Remove 'use client' directives
         // Remove Next.js specific components
         // Update image components
         // Before:
         import Image from 'next/image'
         <Image src="/logo.png" alt="Logo" width={100} height={21} />
         
         // After:
         <img src="/logo.png" alt="Logo" style={{ width: 100, height: 21 }} />
         ```

      6. Routing Changes:
         ```tsx
         // Remove Next.js routing
         // Use React Router instead
         import { BrowserRouter, Routes, Route } from 'react-router-dom'
         
         function App() {
           return (
             <BrowserRouter>
               <Routes>
                 <Route path="/" element={<Home />} />
                 <Route path="/about" element={<About />} />
               </Routes>
             </BrowserRouter>
           )
         }
         ```

      7. Theme Setup:
         ```tsx
         // App.tsx
         import { ThemeProvider } from '@mui/material/styles'
         import CssBaseline from '@mui/material/CssBaseline'
         import { theme } from './shared-theme/theme'
         
         function App() {
           return (
             <ThemeProvider theme={theme}>
               <CssBaseline />
               <AppContent />
             </ThemeProvider>
           )
         }
         ```

      8. Vite Configuration:
         ```ts
         // vite.config.ts
         import { defineConfig } from 'vite'
         import react from '@vitejs/plugin-react'
         import path from 'path'
         
         export default defineConfig({
           plugins: [react()],
           resolve: {
             alias: {
               '@': path.resolve(__dirname, './src')
             }
           }
         })
         ```

      9. TypeScript Configuration:
         ```json
         // tsconfig.json
         {
           "compilerOptions": {
             "target": "ES2020",
             "useDefineForClassFields": true,
             "lib": ["ES2020", "DOM", "DOM.Iterable"],
             "module": "ESNext",
             "skipLibCheck": true,
             "moduleResolution": "bundler",
             "allowImportingTsExtensions": true,
             "resolveJsonModule": true,
             "isolatedModules": true,
             "noEmit": true,
             "jsx": "react-jsx",
             "strict": true,
             "noUnusedLocals": true,
             "noUnusedParameters": true,
             "noFallthroughCasesInSwitch": true,
             "baseUrl": ".",
             "paths": {
               "@/*": ["src/*"]
             }
           },
           "include": ["src"],
           "references": [{ "path": "./tsconfig.node.json" }]
         }
         ```

      10. Package.json Updates:
          ```json
          {
            "scripts": {
              "dev": "vite",
              "build": "tsc && vite build",
              "preview": "vite preview"
            }
          }
          ```

      11. Environment Variables:
          - Change `NEXT_PUBLIC_` prefix to `VITE_`
          - Update environment variable access
          ```ts
          // Before:
          process.env.NEXT_PUBLIC_API_URL
          
          // After:
          import.meta.env.VITE_API_URL
          ```

      12. Static Assets:
          - Move from `public/` to `src/assets/`
          - Update asset imports
          ```ts
          // Before:
          import logo from '/logo.png'
          
          // After:
          import logo from '@/assets/logo.png'
          ```

      13. Testing Steps:
          1. Install dependencies
          2. Start dev server
          3. Test all routes
          4. Verify theme switching
          5. Check responsive design
          6. Test image loading
          7. Verify environment variables
          8. Check static assets
          9. Test build process
          10. Verify production build

      14. Common Issues:
          - Next.js specific components not found
          - Image optimization differences
          - Routing incompatibilities
          - Environment variable access
          - Static asset handling
          - CSS module imports
          - TypeScript path aliases

      15. Performance Considerations:
          - Vite's dev server is faster
          - Different build optimization
          - Different code splitting
          - Different caching strategy
          - Different asset handling

examples:
  - input: |
      # Bad: Keeping Next.js specific code
      import Image from 'next/image'
      import { useRouter } from 'next/router'
      
      # Good: Vite compatible code
      import { useNavigate } from 'react-router-dom'
      <img src="/logo.png" alt="Logo" />
    output: "Replace Next.js specific code with Vite compatible alternatives"

metadata:
  priority: high
  version: 1.0
</rule>