---
description: Standards for setting up a React project with Material UI v6 and Vite
globs: ["*"]
alwaysApply: true
---

# MUI v6 + Vite Project Setup Standards

Standards for setting up a React project with Material UI v6, TypeScript, and Vite.

<rule>
name: mui-v6-vite-setup
description: Standards for setting up a React project with Material UI v6 and Vite
filters:
  - type: file_extension
    pattern: "\\.(ts|tsx|json)$"
  - type: event
    pattern: "file_create"

actions:
  - type: suggest
    message: |
      When setting up a new MUI v6 project with Vite:

      1. Core Dependencies:
         ```json
         {
           "dependencies": {
             "@emotion/react": "^11.11.3",
             "@emotion/styled": "^11.11.0",
             "@mui/icons-material": "^6.4.7",
             "@mui/material": "^6.4.7",
             "react": "^19.0.0",
             "react-dom": "^19.0.0"
           }
         }
         ```

      2. Development Dependencies:
         ```json
         {
           "devDependencies": {
             "@types/node": "^20.11.19",
             "@types/react": "^19.0.0",
             "@types/react-dom": "^19.0.0",
             "@typescript-eslint/eslint-plugin": "^7.0.1",
             "@typescript-eslint/parser": "^7.0.1",
             "@vitejs/plugin-react": "^4.2.1",
             "eslint": "^8.56.0",
             "eslint-plugin-react-hooks": "^4.6.0",
             "eslint-plugin-react-refresh": "^0.4.5",
             "typescript": "^5.2.2",
             "vite": "^5.1.3"
           }
         }
         ```

      3. Project Structure:
         ```
         src/
         ├── components/
         │   ├── Layout.tsx
         │   └── Dashboard.tsx
         ├── App.tsx
         ├── main.tsx
         ├── theme.ts
         └── index.css
         ```

      4. Basic App Structure:
         ```tsx
         // App.tsx
         import { ThemeProvider } from '@mui/material/styles';
         import CssBaseline from '@mui/material/CssBaseline';
         import { theme } from './theme';
         import Layout from './components/Layout';
         import Dashboard from './components/Dashboard';

         function App() {
           return (
             <ThemeProvider theme={theme}>
               <CssBaseline />
               <Layout>
                 <Dashboard />
               </Layout>
             </ThemeProvider>
           );
         }
         ```

      5. Theme Configuration:
         ```tsx
         // theme.ts
         import { createTheme } from '@mui/material/styles';

         export const theme = createTheme({
           palette: {
             mode: 'light',
             primary: {
               main: '#1976d2',
               light: '#42a5f5',
               dark: '#1565c0',
             },
             secondary: {
               main: '#9c27b0',
               light: '#ba68c8',
               dark: '#7b1fa2',
             },
             background: {
               default: '#f5f5f5',
               paper: '#ffffff',
             },
           },
           typography: {
             fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
             h1: {
               fontSize: '2.5rem',
               fontWeight: 500,
             },
             h2: {
               fontSize: '2rem',
               fontWeight: 500,
             },
             h3: {
               fontSize: '1.75rem',
               fontWeight: 500,
             },
           },
           components: {
             MuiCard: {
               styleOverrides: {
                 root: {
                   borderRadius: 12,
                   boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
                 },
               },
             },
           },
         });
         ```

      6. TypeScript Configuration:
         ```json
         // tsconfig.json
         {
           "compilerOptions": {
             "target": "ES2020",
             "useDefineForClassFields": true,
             "lib": ["ES2020", "DOM", "DOM.Iterable"],
             "module": "ESNext",
             "skipLibCheck": true,
             "moduleResolution": "bundler",
             "allowImportingTsExtensions": true,
             "resolveJsonModule": true,
             "isolatedModules": true,
             "noEmit": true,
             "jsx": "react-jsx",
             "strict": true,
             "noUnusedLocals": true,
             "noUnusedParameters": true,
             "noFallthroughCasesInSwitch": true,
             "types": ["vite/client", "node"],
             "allowJs": true,
             "esModuleInterop": true,
             "allowSyntheticDefaultImports": true,
             "forceConsistentCasingInFileNames": true,
             "baseUrl": ".",
             "paths": {
               "@/*": ["src/*"]
             }
           },
           "include": ["src"],
           "references": [{ "path": "./tsconfig.node.json" }]
         }
         ```

         ```json
         // tsconfig.node.json
         {
           "compilerOptions": {
             "composite": true,
             "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
             "target": "ES2022",
             "lib": ["ES2023"],
             "module": "ESNext",
             "skipLibCheck": true,
             "moduleResolution": "bundler",
             "allowImportingTsExtensions": true,
             "emitDeclarationOnly": true,
             "isolatedModules": true,
             "moduleDetection": "force",
             "strict": true,
             "noUnusedLocals": true,
             "noUnusedParameters": true,
             "noFallthroughCasesInSwitch": true,
             "noUncheckedSideEffectImports": true
           },
           "include": ["vite.config.ts"]
         }
         ```

      7. Vite Configuration:
         ```ts
         // vite.config.ts
         import { defineConfig } from 'vite'
         import react from '@vitejs/plugin-react'

         export default defineConfig({
           plugins: [react()],
           server: {
             port: 5173,
             open: true
           },
           resolve: {
             alias: {
               '@': '/src'
             }
           }
         })
         ```

      8. Important Notes:
         - Always use the latest stable version of MUI v6
         - Keep React at version 19
         - Use TypeScript for type safety
         - Follow the component structure in Layout.tsx and Dashboard.tsx
         - Use the provided theme configuration as a base
         - Keep the project structure clean and organized
         - Use proper TypeScript configuration with project references
         - Ensure path aliases are configured in both TypeScript and Vite configs
         - Follow Vite's recommended project structure
         - Use environment variables with the VITE_ prefix

examples:
  - input: |
      # Bad: Using outdated versions
      "@mui/material": "^5.15.0",
      "react": "^18.2.0"

      # Good: Using latest versions
      "@mui/material": "^6.4.7",
      "react": "^19.0.0"
    output: "Using the latest stable versions of dependencies"

metadata:
  priority: high
  version: 1.0
</rule>