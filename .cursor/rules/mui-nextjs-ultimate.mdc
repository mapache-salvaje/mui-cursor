---
description: Standards for building sophisticated Material UI Next.js applications
globs: ["*.tsx", "*.ts"]
alwaysApply: true
---

# MUI NextJS Ultimate Standards

Standards for building sophisticated Material UI NextJS applications with best practices and modern features.

<rule>
name: mui-nextjs-ultimate
description: Standards for building sophisticated Material UI NextJS applications
filters:
  - type: file_extension
    pattern: "\\.(ts|tsx)$"
  - type: event
    pattern: "file_create|file_modify"

actions:
  - type: suggest
    message: |
      When building MUI NextJS applications:

      1. Project Structure:
         ```
         src/
         ├── app/                    # Next.js app directory
         │   ├── (auth)/            # Auth group routes
         │   ├── (dashboard)/       # Dashboard group routes
         │   └── (marketing)/       # Marketing group routes
         ├── components/            # React components
         │   ├── shared/           # Shared components
         │   ├── about/            # About page components
         │   ├── blog/             # Blog page components
         │   ├── checkout/         # Checkout page components
         │   └── dashboard/        # Dashboard components
         ├── hooks/                # Custom React hooks
         ├── lib/                  # Utility functions
         ├── providers/            # Context providers
         ├── styles/               # Global styles
         └── types/                # TypeScript types
         ```

      2. Component Organization:
         - Each page folder contains ONLY components used on that page
         - Shared components go in shared/ directory
         - Keep folder names lowercase and kebab-case
         - Group related components in subfolders
         - Maintain consistent file naming

      3. Required Features:
         - TypeScript support
         - ESLint configuration
         - Prettier formatting
         - Husky pre-commit hooks
         - Conventional commits
         - Responsive design
         - Dark mode support
         - Accessibility compliance
         - Performance optimization
         - SEO best practices

      4. Component Guidelines:
         ```tsx
         // Base component structure with animations
         export default function Component() {
           return (
             <Box
               sx={{
                 position: 'relative',
                 '&::before': {
                   content: '""',
                   position: 'absolute',
                   top: 0,
                   left: 0,
                   right: 0,
                   bottom: 0,
                   background: theme => 
                     theme.palette.mode === 'light'
                       ? `radial-gradient(circle at 50% 50%, ${alpha(theme.palette.primary.main, 0.1)} 0%, transparent 50%)`
                       : `radial-gradient(circle at 50% 50%, ${alpha(theme.palette.primary.main, 0.2)} 0%, transparent 50%)`,
                   zIndex: 0,
                 },
               }}
             >
               {/* Component content */}
             </Box>
           );
         }
         ```

      5. Navigation Requirements:
         ```tsx
         const StyledToolbar = styled(Toolbar)(({ theme }) => ({
           display: 'flex',
           alignItems: 'center',
           justifyContent: 'space-between',
           flexShrink: 0,
           borderRadius: `calc(${theme.shape.borderRadius}px + 8px)`,
           backdropFilter: 'blur(24px)',
           backgroundColor: alpha(theme.palette.background.default, 0.4),
           boxShadow: theme.shadows[1],
           padding: '8px 12px',
         }));
         ```

      6. Dashboard Features:
         - Responsive layout
         - Collapsible sidebar
         - Quick actions
         - Data visualization
         - Search functionality
         - Filtering options
         - Sorting capabilities
         - Pagination support
         - Export functionality

      7. Animation Standards:
         ```tsx
         // Card hover effect
         sx={{
           transition: 'all 0.3s ease-in-out',
           '&:hover': {
             transform: 'translateY(-8px)',
             boxShadow: (theme) =>
               `0 12px 24px ${alpha(theme.palette.primary.main, 0.1)}`,
           },
         }}

         // Button hover effect
         sx={{
           transition: 'all 0.3s ease-in-out',
           '&:hover': {
             transform: 'translateY(-2px)',
             boxShadow: (theme) =>
               `0 8px 16px ${alpha(theme.palette.primary.main, 0.2)}`,
           },
         }}

         // Gradient text
         sx={{
           background: theme => theme.palette.mode === 'light'
             ? `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`
             : `linear-gradient(45deg, ${theme.palette.primary.light}, ${theme.palette.primary.main})`,
           backgroundClip: 'text',
           WebkitBackgroundClip: 'text',
           WebkitTextFillColor: 'transparent',
         }}
         ```

      8. Theme Integration:
         - Use theme.palette for all colors
         - Implement dark/light mode
         - Use theme.spacing for layout
         - Use theme.breakpoints for responsiveness
         - Use theme.transitions for animations
         - Use theme.shadows for elevation
         - Use theme.typography for text styles

      9. Performance Requirements:
         - Implement React.lazy for code splitting
         - Use Next.js Image component
         - Enable CSS layer optimization
         - Implement proper caching
         - Use proper loading states
         - Handle error boundaries
         - Monitor bundle size

      10. Testing Requirements:
          - Unit tests
          - Integration tests
          - E2E tests
          - Accessibility tests
          - Performance tests
          - Visual regression tests
          - Cross-browser testing
          - Mobile testing

      11. Refactoring Guidelines:
          - Maintain existing patterns
          - Update imports correctly
          - Test after changes
          - Document modifications
          - Keep consistent styling
          - Preserve functionality
          - Update dependencies
          - Clean up unused code

examples:
  - input: |
      # Bad: Inconsistent component organization
      src/components/
      ├── About/           # Wrong: Capitalized
      ├── shared/          # Good: Lowercase
      ├── BLOG/           # Wrong: All caps
      └── Checkout/       # Wrong: Capitalized

      # Bad: Mixed component locations
      src/components/About/SharedButton.tsx  # Wrong: Shared in page folder
      src/components/shared/AboutButton.tsx  # Wrong: Page-specific in shared

      # Good: Proper organization
      src/components/
      ├── about/          # Good: Lowercase
      ├── shared/         # Good: Lowercase
      ├── blog/          # Good: Lowercase
      └── checkout/      # Good: Lowercase

      # Good: Correct component placement
      src/components/shared/Button.tsx       # Good: Shared in shared folder
      src/components/about/AboutHero.tsx     # Good: Page-specific in page folder

      # Bad: Static components without animations
      <Card>
        <CardContent>Static content</CardContent>
      </Card>

      # Good: Interactive components with animations
      <Card
        sx={{
          transition: 'all 0.3s ease-in-out',
          '&:hover': {
            transform: 'translateY(-8px)',
            boxShadow: (theme) =>
              `0 12px 24px ${alpha(theme.palette.primary.main, 0.1)}`,
          },
        }}
      >
        <CardContent>
          <Typography
            sx={{
              background: theme => 
                `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,
              backgroundClip: 'text',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
            }}
          >
            Interactive content
          </Typography>
        </CardContent>
      </Card>
    output: "Follow consistent component organization patterns and use interactive components with sophisticated animations"

metadata:
  priority: critical
  version: 2.0
</rule>