---
description: Standards for creating new Material UI templates
globs: ["*"]
alwaysApply: true
---

# MUI Template Creation Standards

Standards for creating new Material UI templates that can be used with Cursor.

<rule>
name: mui-template-creation
description: Standards for creating new Material UI templates
filters:
  - type: file_extension
    pattern: "\\.(ts|tsx|js|md)$"
  - type: event
    pattern: "file_create"

actions:
  - type: suggest
    message: |
      When creating a new MUI template:

      1. Directory Structure:
         ```
         cursor-mui-templates/
         ├── template-name/
         │   ├── components/     # Template-specific components
         │   │   ├── SitemarkIcon.tsx  # Logo component (REQUIRED)
         │   │   ├── NavigationBar.tsx # Navigation component (REQUIRED)
         │   │   └── Footer.tsx        # Footer component (REQUIRED)
         │   ├── shared-theme/   # Shared theme components (do not modify)
         │   ├── README.md       # Template documentation
         │   ├── Template.tsx    # TypeScript version
         │   └── Template.js     # JavaScript version
         ```

      2. Required Components:
         
         a. SitemarkIcon (Logo):
         ```tsx
         export default function SitemarkIcon() {
           return (
             <SvgIcon sx={{ height: 21, width: 100, mr: 2 }}>
               {/* SVG content */}
             </SvgIcon>
           );
         }
         ```

         b. NavigationBar:
         ```tsx
         const StyledToolbar = styled(Toolbar)(({ theme }) => ({
           display: 'flex',
           alignItems: 'center',
           justifyContent: 'space-between',
           flexShrink: 0,
           borderRadius: `calc(${theme.shape.borderRadius}px + 8px)`,
           backdropFilter: 'blur(24px)',
           backgroundColor: alpha(theme.palette.background.default, 0.4),
           boxShadow: theme.shadows[1],
           padding: '8px 12px',
         }));

         export default function NavigationBar({ onToggleColorMode }: NavigationBarProps) {
           return (
             <AppBar
               position="fixed"
               enableColorOnDark
               sx={{
                 boxShadow: 0,
                 bgcolor: 'transparent',
                 backgroundImage: 'none',
                 mt: 'calc(var(--template-frame-height, 0px) + 28px)',
                 border: 0,
                 borderBottom: 0,
               }}
             >
               {/* Navigation content */}
             </AppBar>
           );
         }
         ```

      3. Component Design Principles:
         ```tsx
         // Base component structure with animations and theme integration
         import * as React from 'react';
         import Box from '@mui/material/Box';
         import Container from '@mui/material/Container';
         import { alpha, useTheme } from '@mui/material/styles';

         export default function Component() {
           const theme = useTheme();

           return (
             <Box
               id="section-id"
               sx={(theme) => ({
                 width: '100%',
                 backgroundImage:
                   theme.palette.mode === 'light'
                     ? 'linear-gradient(180deg, #F6F9FC 0%, #FFFFFF 100%)'
                     : `linear-gradient(180deg, ${alpha(
                         theme.palette.background.paper,
                         0.8,
                       )} 0%, ${alpha(theme.palette.background.paper, 0.2)} 100%)`,
                 backgroundSize: '100% 20%',
                 backgroundRepeat: 'no-repeat',
                 backgroundColor: theme.palette.mode === 'light'
                   ? 'white'
                   : theme.palette.background.paper,
                 py: { xs: 8, sm: 10 },
                 px: { xs: 2, sm: 0 },
                 position: 'relative',
                 '&::before': {
                   content: '""',
                   position: 'absolute',
                   top: 0,
                   left: 0,
                   right: 0,
                   bottom: 0,
                   background: theme.palette.mode === 'light'
                     ? `radial-gradient(circle at 50% 50%, ${alpha(theme.palette.primary.main, 0.1)} 0%, transparent 50%)`
                     : `radial-gradient(circle at 50% 50%, ${alpha(theme.palette.primary.main, 0.2)} 0%, transparent 50%)`,
                   zIndex: 0,
                 },
               })}
             >
               <Container>
                 {/* Component content */}
               </Container>
             </Box>
           );
         }

         // Card hover effect
         sx={{
           transition: 'all 0.3s ease-in-out',
           '&:hover': {
             transform: 'translateY(-8px)',
             boxShadow: (theme) =>
               `0 12px 24px ${alpha(theme.palette.primary.main, 0.1)}`,
           },
         }}

         // Button hover effect
         sx={{
           transition: 'all 0.3s ease-in-out',
           '&:hover': {
             transform: 'translateY(-2px)',
             boxShadow: (theme) =>
               `0 8px 16px ${alpha(theme.palette.primary.main, 0.2)}`,
           },
         }}

         // Icon hover effect
         sx={{
           transition: 'transform 0.3s ease-in-out',
           '&:hover': {
             transform: 'scale(1.1)',
           },
         }}

         // Text field hover effect
         sx={{
           '& .MuiOutlinedInput-root': {
             transition: 'all 0.3s ease-in-out',
             '&:hover': {
               transform: 'translateY(-2px)',
             },
           },
         }}

         // Gradient text
         sx={{
           background: theme.palette.mode === 'light'
             ? `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`
             : `linear-gradient(45deg, ${theme.palette.primary.light}, ${theme.palette.primary.main})`,
           backgroundClip: 'text',
           textFillColor: 'transparent',
           WebkitBackgroundClip: 'text',
           WebkitTextFillColor: 'transparent',
         }}

         // Floating animation
         '@keyframes float': {
           '0%': { transform: 'translateY(0px)' },
           '50%': { transform: 'translateY(-20px)' },
           '100%': { transform: 'translateY(0px)' },
         },
         animation: 'float 6s ease-in-out infinite',
         ```

      4. Navigation Guidelines:
         - Use floating header with blur effect
         - Implement SitemarkIcon for logo
         - Include color mode toggle
         - Support mobile responsive menu
         - Maintain consistent button spacing
         - Use theme-aware transparency

      5. Component Guidelines:
         - All interactive elements should have hover states
         - Use consistent animation timing (0.3s ease-in-out)
         - Implement theme-aware gradients and colors
         - Add subtle shadows and elevation changes
         - Include micro-interactions
         - Use responsive spacing and typography
         - Maintain dark mode compatibility

      6. Theme Integration:
         - Use theme.palette.mode for light/dark variants
         - Use alpha utility for transparent colors
         - Use theme.palette colors for gradients
         - Follow MUI's spacing scale
         - Use theme breakpoints for responsiveness

      7. Testing:
         - Test animations in both light and dark modes
         - Verify responsive design
         - Check accessibility
         - Test in different browsers
         - Verify integration works
         - Test keyboard navigation
         - Check animation performance

examples:
  - input: |
      # Bad: Static components without interactions
      <Card>
        <CardContent>
          <Typography>Static content</Typography>
        </CardContent>
      </Card>

      # Good: Interactive components with animations
      <Card
        sx={{
          transition: 'all 0.3s ease-in-out',
          '&:hover': {
            transform: 'translateY(-8px)',
            boxShadow: (theme) =>
              `0 12px 24px ${alpha(theme.palette.primary.main, 0.1)}`,
          },
        }}
      >
        <CardContent>
          <Typography
            sx={{
              transition: 'color 0.3s ease-in-out',
              '&:hover': { color: 'primary.main' },
            }}
          >
            Interactive content
          </Typography>
        </CardContent>
      </Card>
    output: "Use interactive components with smooth animations"

metadata:
  priority: high
  version: 2.0
</rule>