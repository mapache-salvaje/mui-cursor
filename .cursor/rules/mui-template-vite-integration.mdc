# MUI Template Vite Integration Standards

Standards for integrating MUI templates into Vite projects.

<rule>
name: mui-template-vite-integration
description: Standards for integrating MUI templates with Vite
filters:
  - type: file_extension
    pattern: "\\.(ts|tsx|js|jsx)$"
  - type: event
    pattern: "file_create"

actions:
  - type: suggest
    message: |
      When integrating an MUI template with Vite:

      1. Directory Structure:
         ```
         integrations/vite-mui-[template-name]/
         ├── src/
         │   ├── components/     # Template components
         │   ├── shared-theme/   # Shared theme components
         │   ├── App.tsx         # Main app component
         │   ├── main.tsx        # Entry point
         │   └── index.css       # Global styles
         ├── index.html          # HTML template
         ├── package.json        # Dependencies
         ├── tsconfig.json       # TypeScript config
         ├── tsconfig.node.json  # Node TypeScript config
         └── vite.config.ts      # Vite config
         ```

      2. Package.json Dependencies:
         ```json
         {
           "dependencies": {
             "@emotion/react": "^11.11.3",
             "@emotion/styled": "^11.11.0",
             "@mui/icons-material": "^6.4.7",
             "@mui/lab": "^5.0.0-alpha.165",
             "@mui/material": "^6.4.7",
             "react": "^19.0.0",
             "react-dom": "^19.0.0"
           },
           "devDependencies": {
             "@types/react": "^19.0.0",
             "@types/react-dom": "^19.0.0",
             "@typescript-eslint/eslint-plugin": "^7.0.1",
             "@typescript-eslint/parser": "^7.0.1",
             "@vitejs/plugin-react": "^4.2.1",
             "eslint": "^8.56.0",
             "eslint-plugin-react-hooks": "^4.6.0",
             "eslint-plugin-react-refresh": "^0.4.5",
             "typescript": "^5.2.2",
             "vite": "^5.1.3"
           }
         }
         ```

      3. Vite Configuration:
         ```ts
         // vite.config.ts
         import { defineConfig } from 'vite';
         import react from '@vitejs/plugin-react';
         import path from 'path';

         export default defineConfig({
           plugins: [react()],
           server: {
             port: 5173,
             open: true
           },
           resolve: {
             alias: {
               '@': path.resolve(__dirname, './src')
             }
           }
         });
         ```

      4. File Extensions:
         - Use `.tsx` for TypeScript React components
         - Use `.jsx` for JavaScript React components
         - Never use `.js` for files containing JSX syntax
         - When copying shared theme files, ensure they use `.jsx` extension if they contain JSX

      5. Import Paths:
         - Use relative paths from the current file location
         - For shared theme components, use `./shared-theme/` instead of `../shared-theme/`
         - Use the `@` alias for imports from the src directory

      6. Integration Steps:
         1. Create new directory in integrations/
         2. Copy template files to src/components/
         3. Copy shared theme files to src/shared-theme/
         4. Rename any `.js` files containing JSX to `.jsx`
         5. Update import paths to use correct relative paths
         6. Create App.tsx with color mode state
         7. Set up TypeScript and Vite configs
         8. Install dependencies
         9. Test the integration

      7. Testing:
         - Run `npm run dev` to start development server
         - Test color mode toggle
         - Verify all components render
         - Check responsive design
         - Test hot reloading
         - Verify TypeScript compilation

      8. Important Notes:
         - Keep dependencies up to date
         - Follow TypeScript best practices
         - Maintain consistent file structure
         - Test thoroughly before committing
         - Document any special requirements
         - Keep shared theme files unchanged
         - Always use correct file extensions for JSX files
         - Use proper relative paths for imports

examples:
  - input: |
      # Bad: Using .js for JSX files
      src/shared-theme/AppTheme.js
      src/shared-theme/ColorModeIconDropdown.js

      # Good: Using .jsx for JSX files
      src/shared-theme/AppTheme.jsx
      src/shared-theme/ColorModeIconDropdown.jsx
    output: "Use .jsx extension for files containing JSX syntax"

metadata:
  priority: high
  version: 1.0
</rule>